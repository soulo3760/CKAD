controller manager  is the orchestrator
if deployment scales up, CM creates new pods that are allocated to the nodes 
ensures desired state of the cluster is maintained. 
  


kubelet
the node agent, runs on each node in the cluster and responsible for node registration and pod management 
Imagine a Kubernetes cluster as a big apartment building.

Nodes are the individual apartments. Each apartment can house multiple tenants.
Namespaces are like different floors in the building. Each floor can have multiple apartments, but they're separate from the other floors.
So, the cluster is the entire building, made up of many apartments (nodes). Within this building, there are different floors (namespaces) to organize and separate the tenants (applications).

The transient nature of smaller services also allows for decoupling. Each aspect of the traditional application is replaced with a dedicated, 
but transient, microservice or agent. To join these agents, or their replacements together, 
we use services. A service ties traffic from one agent to another (for example, a frontend web server to a backend database) and handles new IP or other information, 
should either one die and be replaced.

Communication is entirely API call-driven, which allows for flexibility. Cluster configuration information is stored in a JSON format inside of etcd,
but is most often written in YAML by the community. Kubernetes agents convert the YAML to JSON prior to persistence to the database
