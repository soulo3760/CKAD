k
kubectl get nodes
kubectl run nginx-pod --image=nginz:alpine
kubectl run messaging --image=redis:alpine --labels=tier=msg
kubectl create ns apx-x999974
kubectl get nodes
kubectl get nodes -ojson > /opt/outputes/nodess3.json

kubectl get pods
kubectl expose pod messaging --port 6479 --dry-run=client -o yaml > 4.yaml
kubectl get svc
kubectl get svc --show-labels
kubectl create -f 4.yaml
kubectl apply -f 4.yaml

kubectl create deployment hr-web-app image=kodecloud/webapp-color --replicas=2
kubectl get pods

kubectl run static-busybox --image=busybox --command sleep 1000 -oyaml --dry-run=client > static-busybox.yaml
clear
kubectl get pods
mv static-busybox.yaml /etc/kubernetes/manifests/   # creates static pod
clear

kubectl run temp-bus -n finance --image=redis:alpine
kubectl get pods -n finance


kubectl get nodes
kubectl get pods

kubectl expose deployment hr-web-app --type=NodePort
--name=hr-web-app-service --port=80
--target-port=80 --node-port=30082

kubectl expose - command used to create a service resource 
Breakdown of the Command
kubectl expose: The command used to create a Service resource.

deployment hr-web-app: type of resource to expose in this case deployment by this name/
--type=NodePort: service of the type NodePort  which exposes the service on a static port on each node
--name=hr-web-app-service: name of service to hr-web-app-service 
--port=80: specifies the port that the service will expose, service will listen on this port 
--target-port=80 specifies pods where the application is running, service will forward traffic from the --port to this --target
--node-port=30082 the port on each node that the service will use, you will access your application at this port on any node in your cluster 

kubectl describe pod orange
kubectl edit pod orange
kubectl apply -f orange.txt
